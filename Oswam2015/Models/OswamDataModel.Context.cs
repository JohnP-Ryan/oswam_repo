//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oswam2015.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OSWAM_DataEntities : DbContext
    {
        public OSWAM_DataEntities()
            : base("name=OSWAM_DataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Preference> Preferences { get; set; }
        public virtual DbSet<LocalInventory> LocalInventories { get; set; }
        public virtual DbSet<Shelf> Shelves { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
    
        public virtual int SetPreferenceValue(Nullable<int> preferenceID, Nullable<int> newPreferenceValue)
        {
            var preferenceIDParameter = preferenceID.HasValue ?
                new ObjectParameter("PreferenceID", preferenceID) :
                new ObjectParameter("PreferenceID", typeof(int));
    
            var newPreferenceValueParameter = newPreferenceValue.HasValue ?
                new ObjectParameter("NewPreferenceValue", newPreferenceValue) :
                new ObjectParameter("NewPreferenceValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetPreferenceValue", preferenceIDParameter, newPreferenceValueParameter);
        }
    
        public virtual ObjectResult<GetAllPreferences_Result> GetAllPreferences()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPreferences_Result>("GetAllPreferences");
        }
    
        public virtual ObjectResult<Nullable<int>> GetPreferenceValue(string preferenceKey)
        {
            var preferenceKeyParameter = preferenceKey != null ?
                new ObjectParameter("PreferenceKey", preferenceKey) :
                new ObjectParameter("PreferenceKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPreferenceValue", preferenceKeyParameter);
        }
    
        public virtual ObjectResult<GetAllShelves_Result> GetAllShelves()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllShelves_Result>("GetAllShelves");
        }
    
        public virtual int DeleteShelf(Nullable<int> iD, Nullable<int> locationX, Nullable<int> locationY)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var locationXParameter = locationX.HasValue ?
                new ObjectParameter("LocationX", locationX) :
                new ObjectParameter("LocationX", typeof(int));
    
            var locationYParameter = locationY.HasValue ?
                new ObjectParameter("LocationY", locationY) :
                new ObjectParameter("LocationY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShelf", iDParameter, locationXParameter, locationYParameter);
        }
    
        public virtual int CreateShelf(Nullable<int> locationX, Nullable<int> locationY, Nullable<decimal> availableVolume, Nullable<decimal> availableWeight, Nullable<bool> cellType)
        {
            var locationXParameter = locationX.HasValue ?
                new ObjectParameter("LocationX", locationX) :
                new ObjectParameter("LocationX", typeof(int));
    
            var locationYParameter = locationY.HasValue ?
                new ObjectParameter("LocationY", locationY) :
                new ObjectParameter("LocationY", typeof(int));
    
            var availableVolumeParameter = availableVolume.HasValue ?
                new ObjectParameter("availableVolume", availableVolume) :
                new ObjectParameter("availableVolume", typeof(decimal));
    
            var availableWeightParameter = availableWeight.HasValue ?
                new ObjectParameter("availableWeight", availableWeight) :
                new ObjectParameter("availableWeight", typeof(decimal));
    
            var cellTypeParameter = cellType.HasValue ?
                new ObjectParameter("CellType", cellType) :
                new ObjectParameter("CellType", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateShelf", locationXParameter, locationYParameter, availableVolumeParameter, availableWeightParameter, cellTypeParameter);
        }
    
        public virtual ObjectResult<GetAllCells_Result> GetAllCells()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCells_Result>("GetAllCells");
        }
    
        public virtual ObjectResult<GetInventoryProducts_Result> GetInventoryProducts(string iD, string searchName, Nullable<int> weightLow, Nullable<int> weightHigh, Nullable<int> priceLow, Nullable<int> priceHigh)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var searchNameParameter = searchName != null ?
                new ObjectParameter("SearchName", searchName) :
                new ObjectParameter("SearchName", typeof(string));
    
            var weightLowParameter = weightLow.HasValue ?
                new ObjectParameter("WeightLow", weightLow) :
                new ObjectParameter("WeightLow", typeof(int));
    
            var weightHighParameter = weightHigh.HasValue ?
                new ObjectParameter("WeightHigh", weightHigh) :
                new ObjectParameter("WeightHigh", typeof(int));
    
            var priceLowParameter = priceLow.HasValue ?
                new ObjectParameter("PriceLow", priceLow) :
                new ObjectParameter("PriceLow", typeof(int));
    
            var priceHighParameter = priceHigh.HasValue ?
                new ObjectParameter("PriceHigh", priceHigh) :
                new ObjectParameter("PriceHigh", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryProducts_Result>("GetInventoryProducts", iDParameter, searchNameParameter, weightLowParameter, weightHighParameter, priceLowParameter, priceHighParameter);
        }
    
        public virtual int DeleteAllCells()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllCells");
        }
    
        public virtual ObjectResult<GetShelfItemTotals_Result> GetShelfItemTotals(Nullable<int> shelfID, Nullable<int> shelfLocX, Nullable<int> shelfLocY)
        {
            var shelfIDParameter = shelfID.HasValue ?
                new ObjectParameter("ShelfID", shelfID) :
                new ObjectParameter("ShelfID", typeof(int));
    
            var shelfLocXParameter = shelfLocX.HasValue ?
                new ObjectParameter("ShelfLocX", shelfLocX) :
                new ObjectParameter("ShelfLocX", typeof(int));
    
            var shelfLocYParameter = shelfLocY.HasValue ?
                new ObjectParameter("ShelfLocY", shelfLocY) :
                new ObjectParameter("ShelfLocY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetShelfItemTotals_Result>("GetShelfItemTotals", shelfIDParameter, shelfLocXParameter, shelfLocYParameter);
        }
    
        public virtual int SortVolume()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SortVolume");
        }
    
        public virtual ObjectResult<GetOrderCount_Result> GetOrderCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderCount_Result>("GetOrderCount");
        }
    
        public virtual ObjectResult<GetOrderProducts_Result> GetOrderProducts(string orderID)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderProducts_Result>("GetOrderProducts", orderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOrderTotalPrice(string orderID)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOrderTotalPrice", orderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOrderTotalVolume(string orderID)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOrderTotalVolume", orderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetOrderTotalWeight(string orderID)
        {
            var orderIDParameter = orderID != null ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetOrderTotalWeight", orderIDParameter);
        }
    
        public virtual ObjectResult<GetShelfContents_Result> GetShelfContents(Nullable<int> inputLocX, Nullable<int> inputLocY)
        {
            var inputLocXParameter = inputLocX.HasValue ?
                new ObjectParameter("InputLocX", inputLocX) :
                new ObjectParameter("InputLocX", typeof(int));
    
            var inputLocYParameter = inputLocY.HasValue ?
                new ObjectParameter("InputLocY", inputLocY) :
                new ObjectParameter("InputLocY", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetShelfContents_Result>("GetShelfContents", inputLocXParameter, inputLocYParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetTotalOrderTime(string inputOrderNum)
        {
            var inputOrderNumParameter = inputOrderNum != null ?
                new ObjectParameter("InputOrderNum", inputOrderNum) :
                new ObjectParameter("InputOrderNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTotalOrderTime", inputOrderNumParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAverageFillTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAverageFillTime");
        }
    
        public virtual ObjectResult<Nullable<int>> GetTotalStoredItemNum()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTotalStoredItemNum");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalStoredItemPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalStoredItemPrice");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTotalStoredItemVolume()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTotalStoredItemVolume");
        }
    
        public virtual int SortNameAlpha()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SortNameAlpha");
        }
    
        public virtual int DeleteOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrders");
        }
    
        public virtual int orderGenerator(Nullable<int> orderSize)
        {
            var orderSizeParameter = orderSize.HasValue ?
                new ObjectParameter("orderSize", orderSize) :
                new ObjectParameter("orderSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("orderGenerator", orderSizeParameter);
        }
    
        public virtual int ProcessAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessAllOrders");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAverageFillTimeWaiting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAverageFillTimeWaiting");
        }
    }
}

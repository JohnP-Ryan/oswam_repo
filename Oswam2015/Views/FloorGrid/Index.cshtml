@model Oswam2015.Models.CanvasModel
@{
    ViewData["Title"] = "Floor Grid";
    ViewBag.Page = "FloorGrid";
}


<div class="row" id="main">
    <div class="col-lg-11">
        <canvas id="canvas"></canvas>
    </div>
    <div class="col-lg-1" align="right" style="height: 100%;">
        <button id="configBtn" class="btn btn-primary" style="font-size:20px;cursor:pointer;" onclick="openNav()">&#9776; Config</button>

        <div class="pre-scrollable" id="shelfContentsDiv">
            <table class="table table-striped" id="shelfContentsDisplay">

            </table>
        </div>
    </div>
</div>

<div id="mySidenav" class="sidenav text-center">
    <a id="placemodeToggleButton" href="#" onclick="placemodeToggle()">Enter Place Mode</a>
    <div id="cellButtonGroup" class="btn-group text-center" role="group" aria-label="...">
        <hr />
        <p>Place item...</p>
        <button id="shelfButton" type="button" class="btn btn-primary" onclick="placingShelf()">Shelf</button>
        <button id="stationButton" type="button" class="btn btn-primary active" onclick="placingStation()">Packing</button>
        <br />
        <p>Shelves Remaining:</p>
        <div id="shelfRemainingPrintout"></div>
        <p>Pack Stations Remanining:</p>
        <div id="stationRemainingPrintout"></div>
        <hr />
    </div>
    <div>
        <br />
        <a id="sortButton" href="#" onclick="executeSort()">Distribute Items to Shelves</a>
    </div>
    <div>
        <br />
        <a id="deletemodeToggleButton" href="#" onclick="deletemodeToggle()">Enter Delete Mode</a>
    </div>
    <div>
        <br />
        <a href="javascript:void(0)" onclick="closeNav()">Exit Config</a>
    </div>
</div>


@section Styles {
    <style>
        .sidenav {
            height: 100%;
            width: 0;
            position: fixed;
            z-index: 1;
            top: 0;
            right: 0;
            background-color: #111;
            overflow-x: hidden;
            transition: 0.5s;
            padding-top: 60px;
        }

        .sidenav a {
            padding: 8px 8px 8px 32px;
            text-decoration: none;
            font-size: 20px;
            color: #818181;
            display: block;
            transition: 0.3s
        }
        .sidenav a:hover, .offcanvas a:focus{
            color: #f1f1f1;
        }

        #main {
            transition: margin-right .5s;
            padding: 16px;
        }
    </style>
}



@section Scripts {
    <script type="text/javascript">

        var cellSizePx = 0;
        var sideMargin = 220;
        var placeMode = false;
        var deleteMode = false;
        var placeShelf = true;

        var maxShelfNum = @Model.getMaxShelfNum();
        var placedShelfNum = @Model.getPlacedShelfNum();
        var maxStationNum = @Model.getMaxStationNum();
        var placedStationNum = @Model.getPlacedStationNum();


        $.ajax({
            type: 'POST',
            url: '/FloorGrid/editCell',
            data: {'LocX': 0, 'LocY': 0, 'CellType': 2},
            success: function(data){
                var json = JSON.parse(data);

                placedShelfNum = parseInt(json[0]);
                placedStationNum = parseInt(json[1]);

                document.getElementById("shelfRemainingPrintout").innerText = (maxShelfNum - placedShelfNum);
                document.getElementById("stationRemainingPrintout").innerText = (maxStationNum - placedStationNum);
            }
        });

        //alert("" + maxShelfNum + " " + placedShelfNum + " " + maxStationNum + " " + placedStationNum);

        //Sidebar animations
        function openNav() {
            document.getElementById("mySidenav").style.width = "220px";
            document.getElementById("main").style.marginRight = "220px";
            document.getElementById("configBtn").style.display = 'none';
            document.getElementById("shelfContentsDiv").style.display = 'none';
            document.getElementById("cellButtonGroup").style.display = 'none';
        }

        function closeNav() {
            document.getElementById("mySidenav").style.width = "0";
            document.getElementById("main").style.marginRight= "0";
            document.getElementById("configBtn").style.display = 'inline-block';
            document.getElementById("shelfContentsDiv").style.display = 'inline-block';
            if(placeMode)
                placemodeToggle();
            if(deleteMode)
                deletemodeToggle();
        }

        //mode toggle buttons
        function placemodeToggle(){
            if(placeMode){ //exit place mode
                document.getElementById("placemodeToggleButton").innerText = "Enter Place Mode";
                document.getElementById("cellButtonGroup").style.display = 'none';
                placeMode = false;
            }
            else{ //enter place mode
                document.getElementById("placemodeToggleButton").innerText = "Exit Place Mode";
                document.getElementById("cellButtonGroup").style.display = 'inline-block';

                $.ajax({
                    type: 'POST',
                    url: '/FloorGrid/editCell',
                    data: {'LocX': 0, 'LocY': 0, 'CellType': 2},
                    success: function(data){
                        var json = JSON.parse(data);

                        placedShelfNum = parseInt(json[0]);
                        placedStationNum = parseInt(json[1]);

                        document.getElementById("shelfRemainingPrintout").innerText = (maxShelfNum - placedShelfNum);
                        document.getElementById("stationRemainingPrintout").innerText = (maxStationNum - placedStationNum);
                    }
                });

                placeMode = true;
                if(deleteMode)
                    deletemodeToggle();
            }
        }

        function executeSort(){
            //possibly display confirmation dialog before sending to sort
            //may need loading indicator

            var url = '/Sorting/Index';

            closeNav();

            $.ajax({
                type: 'POST',
                url: url,
                //data: {'',},
                success: function(){
                    alert("Returned from sorting");
                }
            });
        }

        function deletemodeToggle(){
            if(deleteMode){ //exit delete mode
                document.getElementById("deletemodeToggleButton").innerText = "Enter Delete Mode";
                deleteMode = false;
            }
            else{ //enter delete mode
                document.getElementById("deletemodeToggleButton").innerText = "Exit Delete Mode";
                deleteMode = true;
                if(placeMode)
                    placemodeToggle();
            }
        }
        //Place item selection rocker
        function placingShelf(){
            $('#shelfButton').removeClass('active');
            $('#stationButton').addClass('active');
            document.activeElement.blur()
            placeShelf = true;
        }
        function placingStation(){
            $('#shelfButton').addClass('active');
            $('#stationButton').removeClass('active');
            document.activeElement.blur()
            placeShelf = false;
        }


        //Canvas
        (function () {
            var canvas = document.getElementById('canvas'),
            context = canvas.getContext('2d');

            canvas.addEventListener('click', handleClick);


            // resize the canvas to fill browser window dynamically
            window.addEventListener('resize', resizeCanvas, false);

            function resizeCanvas() {
                //Determine best cell size to fit viewport
                if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 60){
                    cellSizePx = 60;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 55){
                    cellSizePx = 55;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 50){
                    cellSizePx = 50;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 45){
                    cellSizePx = 45;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 40){
                    cellSizePx = 40;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 35){
                    cellSizePx = 35;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 30){
                    cellSizePx = 30;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 20 ){
                    cellSizePx = 20;
                }
                else if ((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 10){
                    cellSizePx = 10;
                }
                else
                {
                    alert("Unsupported Viewport size: more horizontal resolution required for configured warehouse");
                }

                canvas.width = @Model.getXCellDimension() *  cellSizePx;
                canvas.height = @Model.getYCellDimension() * cellSizePx;

                //alert("" + cellSizePx);

                /**
                 *     Your drawings need to be inside this function otherwise they will be reset when
                 *     you resize the browser window and the canvas will be cleared.
                 */
                drawCells();
            }
            resizeCanvas();

            function drawCells() {
                context.beginPath();
                context.fillRect(0,0, canvas.width, canvas.height);

                @for(var row = 0; row < Model.getYCellDimension(); row++)
                {
                    for(var column = 0; column < Model.getXCellDimension(); column++)
                    {
                        <text>var xLocation = @column * cellSizePx;
                var yLocation = @row * cellSizePx;</text>
                        if (Model.getCellGrid()[column][row].getShelfId() != -1)
                        {

                            if(Model.getCellGrid()[column][row].getCellType() == 1)
                            {
                                <text>context.fillStyle = "green";
                context.fillRect((xLocation + 1), (yLocation + 1), (cellSizePx -2), (cellSizePx - 2));
                </text>
                            }
                            else
                            {
                                <text>context.fillStyle = "yellow";
                context.fillRect((xLocation + 1), (yLocation + 1), (cellSizePx - 2), (cellSizePx - 2));
                                </text>
                            }

                        }
                        else
                        {
                            <text>context.fillStyle = "white";
                context.fillRect((xLocation + 1), (yLocation + 1), (cellSizePx - 2), (cellSizePx - 2));
                </text>
                        }
                    }
                }

            }
            function handleClick(e) {
                var url = '/FloorGrid/editCell';
                var coordLocX = Math.floor(e.offsetX / cellSizePx);
                var coordLocY = Math.floor(e.offsetY / cellSizePx);
                var pxLocX = (Math.floor(e.offsetX / cellSizePx) * cellSizePx);
                var pxLocY = (Math.floor(e.offsetY / cellSizePx) * cellSizePx);
                var placedCellType = -1;

                //collect clicked shelf contents to display in sidebar
                $.ajax({
                    type: 'GET',
                    url: '/FloorGrid/getShelfContents',
                    data: {'LocX':coordLocX, 'LocY': coordLocY},
                    datatype: "html",
                    success: function(html){
                        $("#shelfContentsDisplay").html(html);
                    }
                });

                //Determine place type
                if(placeMode && placeShelf && (maxShelfNum > placedShelfNum)){
                    context.fillStyle = "green";
                    context.fillRect(pxLocX + 1, pxLocY + 1, cellSizePx - 2, cellSizePx - 2);
                    placedShelfNum++;
                    placedCellType = 1;
                }
                else if(placeMode && !placeShelf && (maxStationNum > placedStationNum)){
                    context.fillStyle = "yellow";
                    context.fillRect(pxLocX + 1, pxLocY + 1, cellSizePx - 2, cellSizePx - 2);
                    placedStationNum++;
                    placedCellType = 0;
                }
                else if(deleteMode){
                    context.fillStyle = "white";
                    context.fillRect(pxLocX + 1, pxLocY + 1, cellSizePx - 2, cellSizePx - 2);
                }

                //edit grid if in an edit mode (placemode, deletemode)

                if(placeMode || deleteMode)
                {
                    $.ajax({
                        type: 'POST',
                        url: url,
                        data: {'LocX':coordLocX, 'LocY': coordLocY, 'CellType':placedCellType},
                        success: function(data){
                            var json = JSON.parse(data);

                            placedShelfNum = parseInt(json[0]);
                            placedStationNum = parseInt(json[1]);

                            document.getElementById("shelfRemainingPrintout").innerText = (maxShelfNum - placedShelfNum);
                            document.getElementById("stationRemainingPrintout").innerText = (maxStationNum - placedStationNum);
                        }
                    });
                }
            }
        })();
    </script>
}
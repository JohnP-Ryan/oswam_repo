@model Oswam2015.Models.CanvasModel
@{
    ViewData["Title"] = "Floor Grid";
    ViewBag.Page = "FloorGrid";
}

<canvas id="canvas"></canvas>

@section Scripts {
    <script type="text/javascript">

        var cellSizePx = 0;
        var sideMargin = 120;
        var placeMode = true;

        //alert("" + window.innerHeight);
        //alert("" + window.innerWidth);

        (function () {
            var canvas = document.getElementById('canvas'),
            context = canvas.getContext('2d');

            canvas.addEventListener('click', handleClick);


            // resize the canvas to fill browser window dynamically
            window.addEventListener('resize', resizeCanvas, false);

            function resizeCanvas() {
                //Determine best cell size to fit viewport
                if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 60){
                    cellSizePx = 60;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 50){
                    cellSizePx = 50;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 40){
                    cellSizePx = 40;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 30){
                    cellSizePx = 30;
                }
                else if((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 20 ){
                    cellSizePx = 20;
                }
                else if ((window.innerWidth - sideMargin) / @Model.getXCellDimension() >= 10){
                    cellSizePx = 10;
                }
                else
                {
                    alert("Unsupported Viewport size: more horizontal resolution required for configured warehouse");
                }

                canvas.width = @Model.getXCellDimension() *  cellSizePx;
                canvas.height = @Model.getYCellDimension() * cellSizePx;

                //alert("" + cellSizePx);

                /**
                 *     Your drawings need to be inside this function otherwise they will be reset when
                 *     you resize the browser window and the canvas will be cleared.
                 */
                drawCells();
            }
            resizeCanvas();

            function drawCells() {
                context.beginPath();
                context.lineWidth = 2;
                context.strokeStyle = 'black';

                @for(var row = 0; row < Model.getYCellDimension(); row++)
                {
                    for(var column = 0; column < Model.getXCellDimension(); column++)
                    {
                        <text>var xLocation = @column * cellSizePx;
                var yLocation = @row * cellSizePx;</text>
                        if (Model.getCellGrid()[column][row].getShelfId() != -1)
                        {
                            <text>context.fillStyle = "green";
                            context.fillRect(xLocation, yLocation, cellSizePx, cellSizePx);
                            </text>

                        }
                        else
                        {
                            <text>context.fillStyle = "white";
                            context.rect(xLocation, yLocation, cellSizePx, cellSizePx);
                            </text>
                        }
                        <text>
                        context.fill();
                        context.stroke();
                        </text>
                    }
                }

            }
            function handleClick(e) {
                context.fillStyle = "black";

                context.fillRect(Math.floor(e.offsetX / cellSizePx) * cellSizePx,
                  Math.floor(e.offsetY / cellSizePx) * cellSizePx,
                  cellSizePx, cellSizePx);
            }
        })();
    </script>
}